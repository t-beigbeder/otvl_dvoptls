---
# sk3s_node/tasks/main.yml

- name: Create rancher/k3s configuration directory for server nodes
  file:
    path: "/etc/rancher/k3s"
    state: directory
    mode: 0755

- name: Configure rancher/k3s TLS SAN in /etc/rancher/k3s/config.yaml for server nodes
  template:
    src: rancher-config.yaml
    dest: /etc/rancher/k3s/config.yaml
  when: otvl_meta.k3s_server | default(false)

- name: Create otvl/k3s configuration yaml directory
  file:
    path: "{{ cv.config_paths.data }}/otvl/k3s"
    state: directory
    mode: 0755

- name: Create k3s manifests directory
  file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    mode: 0755

- name: Configure traefik ingress controller /var/lib/rancher/k3s/server/manifests/traefik-config.yaml
  template:
    src: traefik-config.yaml
    dest: /var/lib/rancher/k3s/server/manifests/traefik-config.yaml
  when: cv.k3s.traefik.customize and otvl_meta.k3s_server | default(false)

- name: Define k3s service name for server node
  set_fact:
    k3s_svc_name: k3s
  when: otvl_meta.k3s_server | default(false)

- name: Define k3s service name for agent node
  set_fact:
    k3s_svc_name: k3s-agent
  when: otvl_meta.k3s_agent | default(false)

- name: Install the k3s cluster if absent
  shell: "curl -sfL https://get.k3s.io | sh -s - --token-file /root/.config/.otvl/.secrets/k3s_token {{ '--docker' if cv.k3s.docker | default(false) }}"
  args:
    creates: /etc/systemd/system/{{ k3s_svc_name }}.service
  when: otvl_meta.k3s_server | default(false)
  register: k3s_svc_create
  # cat /var/lib/rancher/k3s/server/token

- name: Install the k3s agent with agent-deploy taint if absent
  shell: "curl -sfL https://get.k3s.io | sh -s - agent -s https://{{ cv.k3s.sc_api_server }}:6443 --token-file /root/.config/.otvl/.secrets/k3s_token {{ '--docker' if cv.k3s.docker | default(false) }} --node-taint agent-deploy=true:NoExecute --node-label otvl-agent={{ ci_env.CI_LHN }}"
  args:
    creates: /etc/systemd/system/{{ k3s_svc_name }}.service
  when: (otvl_meta.k3s_agent | default(false)) and not (otvl_meta.has_gpu | default(false))
  register: k3s_svc_create

- name: Install the k3s agent with nvidia.com/gpu taint if absent
  shell: "curl -sfL https://get.k3s.io | sh -s - agent -s https://{{ cv.k3s.sc_api_server }}:6443 --token-file /root/.config/.otvl/.secrets/k3s_token {{ '--docker' if cv.k3s.docker | default(false) }} --node-taint nvidia.com/gpu=true:NoSchedule --node-label otvl-agent={{ ci_env.CI_LHN }}"
  args:
    creates: /etc/systemd/system/{{ k3s_svc_name }}.service
  when: (otvl_meta.k3s_agent | default(false)) and (otvl_meta.has_gpu | default(false))
  register: k3s_svc_create

- name: Configure the k3s private registry /etc/rancher/k3s/registries.yaml
  template:
    src: registries.yaml
    dest: /etc/rancher/k3s/registries.yaml
  register: reg_del

- name: Restart the k3s.service once registries.yaml delivered
  systemd:
    name: "{{ k3s_svc_name }}.service"
    state: restarted
  when: reg_del.changed

- name: Make k3s cluster config copy readable
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    remote_src: true
    dest: "{{ cv.config_paths.data }}/otvl/k3s/k3s.yaml"
    mode: "0644"
  when: otvl_meta.k3s_server | default(false) and (k3s_svc_create.changed or reg_del.changed)

- name: Adapt k3s cluster config localhost to api_server in {{ cv.config_paths.data }}/otvl/k3s/k3s.yaml
  ansible.builtin.replace:
    path: "{{ cv.config_paths.data }}/otvl/k3s/k3s.yaml"
    regexp: "https://127.0.0.1:"
    replace: "https://{{ cv.k3s.sc_api_server }}:"
  when: otvl_meta.k3s_server | default(false)

- name: Create kube config {{ remote_user_home }}/.kube
  file:
    path: "{{ remote_user_home }}/.kube"
    state: directory
    mode: 0700
  become: false

- name: Configure kube clients on k3s single node
  ansible.builtin.copy:
    src: "{{ cv.config_paths.data }}/otvl/k3s/k3s.yaml"
    remote_src: false
    dest: "{{ remote_user_home }}/.kube/config"
    mode: "0600"
  become: false
  when: otvl_meta.k3s_server | default(false)

- name: Install Nvidia GPU operator
  block:
    - command:
        cmd: "/home/{{ ansible_env.USER }}/locgit/otvl_dvoptls/install_scripts/common/install_gpu_operator.sh"
      register: igo
      ignore_errors: true
    - debug: var=igo.cmd
    - debug: var=igo.stderr_lines
    - debug: var=igo.stdout_lines
    - fail:
      when: igo.rc != 0
  become: false
  when: (otvl_meta.k3s_server | default(false)) and (cv.nvidia.has_gpu | default(false))

###